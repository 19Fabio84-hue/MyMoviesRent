{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTENTE\\\\Desktop\\\\GitHub\\\\MyMoviesRent\\\\src\\\\pages\\\\series.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Context } from '../context';\nimport TopRatePage from '../componentChild/toprate';\nimport Header from '../componentChild/header';\nimport '../style/myList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Series() {\n  _s();\n  const {\n    finalArrayMoviesAndSeries,\n    categoriesArray\n  } = useContext(Context);\n  const [hover, setHover] = useState(false);\n  const arraySeries = finalArrayMoviesAndSeries.filter(movie => movie.movie === 'tv');\n  let [searchParams, setSearchParams] = useSearchParams();\n  const typeFilter = searchParams.get('type');\n  const displayedMovies = typeFilter ? arraySeries.filter(movie => movie.type === typeFilter) : arraySeries;\n  const arrayFilteredType = displayedMovies.map((movie, index) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: movie.poster_path && /*#__PURE__*/_jsxDEV(TopRatePage, {\n        id: movie.id,\n        movie: movie.movie === 'Movie' ? 'movie' : movie.movie,\n        url: `https://image.tmdb.org/t/p/original/${movie.poster_path}`,\n        isFavorite: movie.isFavorite,\n        title: movie.title,\n        date: movie.release_date,\n        vote: movie.vote_average,\n        overview: movie.overview,\n        state: {\n          search: `series`,\n          type: `${typeFilter === null ? '?.=' : '?type='}`,\n          name: `${typeFilter === null ? '' : `${typeFilter}`}`,\n          title: `${typeFilter === null ? 'All' : `${typeFilter}`} series`\n        },\n        itemCart: {\n          id: movie.id,\n          isFavorite: movie.isFavorite,\n          img: `https://image.tmdb.org/t/p/original/${movie.poster_path}`,\n          title: movie.title,\n          overview: movie.overview,\n          vote: movie.vote_average,\n          date: movie.release_date,\n          price: 2.99,\n          quantity: 1,\n          movie: movie.movie\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 34\n      }, this)\n    }, void 0, false);\n  });\n  const categoriesMap = categoriesArray.map((movie, index) => {\n    const setParamsAndHover = () => {\n      setSearchParams(`type=${movie.value}`);\n      setHover(!hover);\n    };\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: hover ? 'button' : 'button-none',\n      onClick: setParamsAndHover,\n      children: movie.name\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  });\n  const [series, setSeries] = useState(false);\n  function setMovie() {\n    setSeries(false);\n  }\n  function setTv() {\n    setSeries(true);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      movies: setMovie,\n      series: setTv,\n      value: series\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"film-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setHover(!hover),\n        className: hover ? 'categories-movie' : 'categories-none',\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSearchParams('.'),\n          className: `${hover ? 'button' : 'button-selected'} `,\n          children: hover === false ? `${typeFilter === null ? 'All' : typeFilter === 'ActionAdventure' ? 'Action & Adventure' : typeFilter === 'Fantasy' ? 'Sci-Fi & Fantasy' : typeFilter === 'History' ? 'History & War' : typeFilter === 'Music' ? 'Music & News' : typeFilter}` : 'All'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), hover && categoriesMap]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"myList-ctn film\",\n        children: arrayFilteredType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Series, \"UZbYu2xTbtK1uffGqrCgpwPB0b0=\", false, function () {\n  return [useSearchParams];\n});\n_c = Series;\nvar _c;\n$RefreshReg$(_c, \"Series\");","map":{"version":3,"names":["React","useContext","useState","useSearchParams","Context","TopRatePage","Header","Series","finalArrayMoviesAndSeries","categoriesArray","hover","setHover","arraySeries","filter","movie","searchParams","setSearchParams","typeFilter","get","displayedMovies","type","arrayFilteredType","map","index","poster_path","id","isFavorite","title","release_date","vote_average","overview","search","name","img","vote","date","price","quantity","categoriesMap","setParamsAndHover","value","series","setSeries","setMovie","setTv"],"sources":["C:/Users/UTENTE/Desktop/GitHub/MyMoviesRent/src/pages/series.js"],"sourcesContent":["import React, { useContext , useState } from 'react'\r\nimport { useSearchParams} from 'react-router-dom'\r\nimport { Context } from '../context'\r\nimport TopRatePage from '../componentChild/toprate'\r\nimport Header from '../componentChild/header'\r\nimport '../style/myList.css'\r\nexport default function Series(){\r\n   const {finalArrayMoviesAndSeries , categoriesArray } = useContext(Context)\r\n   const [ hover , setHover] = useState(false)\r\n   const arraySeries = finalArrayMoviesAndSeries.filter(movie => movie.movie==='tv')\r\n   let [searchParams , setSearchParams] = useSearchParams()\r\n   const typeFilter = searchParams.get('type')\r\n   const displayedMovies = typeFilter ? arraySeries.filter(movie => movie.type === typeFilter) : arraySeries\r\n   const arrayFilteredType = displayedMovies.map((movie , index )=> {\r\n    return (<>\r\n           {movie.poster_path && <TopRatePage \r\n           key={index}\r\n            id={movie.id}\r\n            movie={movie.movie === 'Movie' ? 'movie' : movie.movie}\r\n            url={`https://image.tmdb.org/t/p/original/${movie.poster_path}`}\r\n            isFavorite={movie.isFavorite}\r\n            title={movie.title}\r\n            date={movie.release_date}\r\n            vote={movie.vote_average}\r\n            overview={ movie.overview }\r\n            state={{search : `series` ,type:`${typeFilter === null ? '?.=' :'?type=' }`,\r\n                   name : `${typeFilter === null ? '' :`${typeFilter}`}` , title :`${typeFilter === null ? 'All' :`${typeFilter}`} series`}}\r\n             itemCart={{id : movie.id , isFavorite : movie.isFavorite , img : `https://image.tmdb.org/t/p/original/${movie.poster_path}`,\r\n                        title : movie.title ,overview : movie.overview , vote : movie.vote_average , date : movie.release_date,\r\n                        price:2.99 ,quantity : 1 ,movie:movie.movie}}\r\n           />}\r\n   </> )\r\n   })\r\n   const categoriesMap = categoriesArray.map((movie,index) =>{\r\n      const setParamsAndHover = ()=> {\r\n         setSearchParams(`type=${movie.value}`)\r\n         setHover(!hover)\r\n      }\r\n      return (\r\n      <button  key={index} className={hover ?'button' : 'button-none'} onClick={setParamsAndHover}>{movie.name}</button>\r\n      )\r\n     })\r\n     const [series ,setSeries] = useState(false)\r\n     function setMovie(){setSeries(false)}\r\n    function setTv(){setSeries(true)}\r\n    return (<>\r\n       <Header movies={setMovie} series={setTv} value={series} />\r\n      <div className='film-section'>\r\n      <div onClick={()=>setHover(!hover)} className={hover ? 'categories-movie':'categories-none' }>\r\n          <button  onClick={()=>setSearchParams('.')} className={`${hover ? 'button' :'button-selected' } `}>\r\n            {hover === false ? `${typeFilter === null ? 'All' : typeFilter === 'ActionAdventure' ?  'Action & Adventure' :\r\n                                   typeFilter === 'Fantasy'? 'Sci-Fi & Fantasy' :\r\n                                    typeFilter === 'History' ? 'History & War' :\r\n                                    typeFilter === 'Music' ? 'Music & News':\r\n                                     typeFilter}` :'All' }</button>\r\n         {hover && categoriesMap}\r\n      </div>\r\n      <div className='myList-ctn film' >\r\n      {arrayFilteredType}\r\n      </div>\r\n  </div>\r\n  </> )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}